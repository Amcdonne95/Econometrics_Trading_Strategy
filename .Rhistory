library(lubridate)
library(parallel)
detectCores()
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl,
library(dplyr)
library(data.table)
library(lubridate)
library(parallel))
clusterEvalQ(cl,install.packages("dplR"))
clusterEvalQ(cl,install.packages("dplyr"))
stopCluster(cl)
numcores = detectCores()
cl = makeCluster(numcores)
clusterEvalQ(cl, 2 + 2)
library(lubridate)
clusterEvalQ(cl, {
library(dplyr)
library(data.table)
library(lubridate)
})
stopCluster(cl)
library(parallel)
library(dplyr)
library(data.table)
library(lubridate)
library(multidplyr)
?detectCores()
cl = detectCores()
cl = detectCores(logical = FALSE)
setwd("C:\\Users\\austi\\Desktop\\Imperial\\Modules\\Econometrics\\R_CourseWork\\Econometrics_Trading_Strategy")
load('TEST_data_subset.RData')
data = tbl_df(data_mining)
remove(data_mining)
sicCodeRange = c(0099, 0999, 1499, 1799, 1999, 3999,
4999, 5199, 5999, 6799, 8999, 9099,
9729, 9899, 9999)
sicDivsionCode = c(1:10, 0, 11, 0, 12)
data$industry = cut(data$sic, sicCodeRange)
levels(data$industry) = sicDivsionCode
data$industry=as.numeric(data$industry)
uniquePermno = unique(data$permno)
cluster = create_cluster(cores = cl)
uniquePermno = split(uniquePermno, ceiling(seq_along(uniquePermno)/2))
uniquePermno = unique(data$permno)
?multidplyr()
?multidplyr
x = chunk2(uniquePermno, cl)
x = split(uniquePermno, ceiling(seq_along(uniquePermno)/cl))
x = split(uniquePermno, ceiling(length(uniquePermno)/cl))
x = split(uniquePermno, ceiling(seq_along(uniquePermno)/cl))
x[1]
x[2]
x = split(uniquePermno, ceiling(763/cl))
x = split(uniquePermno, sort(uniquePermno%%n))
x = split(uniquePermno, sort(uniquePermno%%cl))
head(data)
x[1]
?tibble
library(nycflights13)
install.packages(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights1 <- partition(flights, flight)
flights1
flights
setwd("C:\\Users\\austi\\Desktop\\Imperial\\Modules\\Econometrics\\R_CourseWork\\Econometrics_Trading_Strategy")
load('TEST_data_subset.RData')
data = tbl_df(data_mining)
remove(data_mining)
sicCodeRange = c(0099, 0999, 1499, 1799, 1999, 3999,
4999, 5199, 5999, 6799, 8999, 9099,
9729, 9899, 9999)
sicDivsionCode = c(1:10, 0, 11, 0, 12)
data$industry = cut(data$sic, sicCodeRange)
levels(data$industry) = sicDivsionCode
data$industry=as.numeric(data$industry)
uniquePermno = unique(data$permno)
x = split(uniquePermno, sort(uniquePermno%%cl))
cl = detectCores(logical = FALSE)
x = split(uniquePermno, sort(uniquePermno%%cl))
cluster = create_cluster(cores = cl)
by_permno = data %>%
partition(permno, cluster = cluster)
by_permno
dates=unique(data$date)
months=month(dates)
indic=c(1, diff(months))
datesInd=data.frame(dates, months, indic)
firstDays=datesInd$date[datesInd$indic!=0]
by_permno %>%
# Assign libraries
cluster_library("dplyr") %>%
cluster_library("lubridate") %>%
# Assign values (use this to load functions or data to each core)
cluster_assign_value("firstDays", firstDays) %>%
cluster_assign_value("tradingStrat", tradingStrat)
tradingStrat = function(group, days){
for (t in 1:length(days)-17){
formation = group %>%
filter(group>=days[t] & date<days[12+t]) %>%
group_by(permno) %>%
filter(industry == mean(industry)) %>%
mutate(check=(is.na(price) | price==0)*1) %>%
filter(sum(check)==0) %>%
mutate(return=price/lag(price), log_ret=log(return))
for(i in 1:12){
temp= formation %>%
filter(industry==i)
rank = temp %>%
summarise(cum_ret=sum(log_ret, na.rm=T), avg_ME=mean(cap), month=t) %>%
arrange(cum_ret)
#rank contains all stocks, their SIC, cumulative returns and average market cap over formation period
#Note that we ignore any NAs when computing cumulative returns, this should only happen for the first day in the formation period
n=ceiling(nrow(rank)/10)
#I choose to round up, but it could be debated
if(t==1){
losers[[i]]=rank[1:n,]
winners[[i]]=rank[(nrow(rank)-n+1):nrow(rank),]
#This if/else is not crucial, it just makes winners not have an NA row if there are no stocks
}
else{
losers[[i]]=bind_rows(losers[[i]], rank[1:n,])
winners[[i]]=bind_rows(winners[[i]], rank[(nrow(rank)-n+1):nrow(rank),])
}
#This if is again not crucial, it just makes winners not have an NA row if there are no stocks
}
}
}
by_permno %>%
# Assign libraries
cluster_library("dplyr") %>%
cluster_library("lubridate") %>%
# Assign values (use this to load functions or data to each core)
cluster_assign_value("firstDays", firstDays) %>%
cluster_assign_value("tradingStrat", tradingStrat)
